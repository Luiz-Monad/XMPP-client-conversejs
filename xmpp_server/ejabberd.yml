###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###

hosts:
    - '{{VHOST}}'
# include_config_file: hosts.yml

loglevel: '{{LOG_LEVEL}}'
log_rotate_size: 10485760
log_rotate_count: 1

listen:
    - port: {{PORT}}
      ip: '::'
      module: ejabberd_http
      request_handlers:
          '/admin': ejabberd_web_admin
          '/api': mod_http_api
          '/captcha': ejabberd_captcha
          '/upload': mod_http_upload
          '/ws': ejabberd_http_ws
          '/oauth': ejabberd_oauth

s2s_use_starttls: optional

acl:
    local:
        user_regexp: ''
    loopback:
        ip:
            - 127.0.0.0/8
            - ::1/128
            - ::FFFF:127.0.0.1/128
    admin:
        user:
            - '{{ADMIN_USER}}@{{VHOST}}'
        shared_group:
            - administrators@{{VHOST}}

access_rules:
    local:
        allow: local
    c2s:
        deny: blocked
        allow: local
    announce:
        allow: admin
    configure:
        allow: admin
    muc_create:
        deny: blocked
        allow: local
    pubsub_createnode:
        allow: local
    trusted_network:
        allow: loopback

api_permissions:
    'console commands':
        from:
            - ejabberd_ctl
        who: all
        what: '*'
    'admin access':
        who:
            access:
                allow:
                    - acl: loopback
                    - acl: admin
            oauth:
                scope: 'ejabberd:admin'
                access:
                    allow:
                        - acl: loopback
                        - acl: admin
        what:
            - '*'
            - '!stop'
            - '!start'
    'public commands':
        who:
            ip: 127.0.0.1/8
        what:
            - status
            - connected_users_number

shaper:
    normal: 1000
    fast: 50000

shaper_rules:
    max_user_sessions: 5
    max_user_offline_messages:
        5000: admin
        100: all
    c2s_shaper:
        none: admin
        normal: all
    s2s_shaper: fast

max_fsm_queue: 10000

acme:
    auto: false

modules:
    mod_adhoc: {}
    mod_admin_extra: {}
    mod_announce:
        access: announce
    mod_avatar: {}
    mod_blocking: {}
    mod_bosh: {}
    mod_caps: {}
    mod_carboncopy: {}
    mod_client_state: {}
    mod_configure: {}
    mod_disco: {}
    mod_fail2ban: {}
    mod_http_api: {}
    mod_http_upload:
        put_url: https://{{HOST}}/upload
    mod_last: {}
    mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        ## db_type: sql
        assume_mam_usage: true
        default: never
    mod_mqtt: {}
    mod_muc:
        host: 'conference.{{HOST}}'
        access:
            - allow
        access_admin:
            - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
            - allow
        default_room_options:
            allow_subscription: true # enable MucSub
            mam: true
    mod_muc_admin: {}
    mod_offline:
        access_max_user_messages: max_user_offline_messages
    mod_ping: {}
    mod_privacy: {}
    mod_private: {}
    mod_proxy65:
        access: local
        max_connections: 5
    mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
            - flat
            - pep
        force_node_config:
            ## Avoid buggy clients to make their bookmarks public
            storage:bookmarks:
                access_model: whitelist
    mod_push: {}
    mod_push_keepalive: {}
    mod_register:
        ## Only accept registration requests from the "trusted"
        ## network (see access_rules section above).
        ## Think twice before enabling registration from any
        ## address. See the Jabber SPAM Manifesto for details:
        ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
        ip_access: trusted_network
    mod_roster:
        versioning: true
    mod_sip: {}
    mod_s2s_dialback: {}
    mod_shared_roster: {}
    mod_stream_mgmt:
        ack_timeout: 120
        resume_timeout: 120
        max_resume_timeout: 120
        resend_on_timeout: true
    mod_vcard: {}
    mod_vcard_xupdate: {}
    mod_version:
        show_os: false
### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8
